-- Поиск баз данных
show databases;

-- Создание базы данных
create database stepikdb;

-- Выбор базы данных
use stepikdb;

-- Поиск таблицы
show tables;

-- Создание табблицы
create table book
(
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title   VARCHAR(50),
    author  VARCHAR(30),
    price   DECIMAL(8, 2),
    amount  INT
);

-- Заполнение таблицы значениями
insert into book (title, author, price, amount)
values ('Мастер и Маргарита', 'Булгаков М.А.', 670.99, 3);
insert into book (title, author, price, amount)
values ('Белая гвардия', 'Булгаков М.А.', 540.50, 5);
insert into book (title, author, price, amount)
values ('Идиот', 'Достоевский Ф.М.', 460.00, 10);
insert into book (title, author, price, amount)
values ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);
insert into book (title, author, price, amount)
values ('Черный человек', 'Есенин С.А.', Null, Null);
insert into book (title, author, price, amount)
values ('Стихотворения и поэмы', 'Есенин С.А.', 650.00, 15);
insert into book (title, author, price, amount)
values ('Игрок', 'Достоевский Ф.М.', 480.50, 10);
insert into book (title, author, price, amount)
values ('Евгений Онегин', 'Пушкин А.С.', 610.10, 10);

-- Выбор всех данных из таблицы book
select *
from book;

-- Выборка отдельных столбцов
select author, title, price
from book;

-- Выборка новых столбцов и присвоение им новых имен
select title as Название, author as Автор
from book;

-- Выборка данных с созданием вычисляемого столбца
select title, amount, amount * 1.65 as pack
from book;

-- Выборка данных, вычисляемые столбцы, математические функции
select title,
       author,
       amount,
       ROUND((price - price * 0.3), 2) as new_price
from book;
select author,
       title,
       ROUND(IF(author = 'Булгаков М.А.', price + price * 0.1, IF(author = 'Есенин С.А.', price + price * 0.05, price)),
             2) as new_price
from book;

-- Выборка данных по условию
select author, title, price
from book
where amount < 10;

-- Выборка данных, логические операции
select title, author, price, amount
from book
where (price < 500 or price > 600)
  and amount * price >= 5000;

-- Выборка данных, операторы BETWEEN, IN
select title, author
from book
where (price between 540.50 and 800)
  and amount in (2, 3, 5, 7);

-- Выборка данных с сортировкой
select author, title
from book
where (amount between 2 and 14)
order by author desc, title;

-- Выборка данных, оператор LIKE
select title, author
from book
where title like '%_% %_%'
  and author like '%С.%'
order by title;

-- Выбор уникальных элементов столбца
select distinct amount
from book;

-- Выборка данных, групповые функции SUM и COUNT
select author,
       count(title) as Разлтчных_книг,
       sum(amount)  as Количество_экзепляров
from book
group by author;

-- Выборка данных, групповые функции MIN, MAX и AVG
select author,
       min(price) as Минимальная_цена,
       max(price) as Максимальная_цена,
       avg(price) as Средняя_цена
from book
group by author;

-- Выборка данных c вычислением, групповые функции
select author,
       round(sum(amount * price), 2)                                   as Стоимость,
       round(sum(((price * amount * (18 / 100)) / (1 + 18 / 100))), 2) as НДС,
       round(sum((price * amount) / (1 + (18 / 100))), 2)              as Стоимость_без_НДС
from book
group by author;

-- Вычисления по таблице целиком
select min(price)             as Минимаьная_цена,
       max(price)             as Максимальная_цена,
       round((avg(price)), 2) as Средняя_цена
from book;

-- Выборка данных по условию, групповые функции
select round(avg(price), 2)          as Средняя_цена,
       round(sum(price * amount), 2) as Стоимость
from book
where amount between 5 and 14;

-- Выборка данных по условию, групповые функции, WHERE и HAVING
SELECT author,
       SUM(price * amount) as Стоимость
FROM book
WHERE title <> 'Идиот'
  and title <> 'Белая гвардия'
GROUP BY author
HAVING SUM(price * amount) > 5000
ORDER BY Стоимость DESC;

select author,
       round(sum(price * amount), 1) as Стоимость
from book
where amount between 10 and 15
group by author
having sum(price * amount) > 3500
order by Стоимость;

-- Вложенный запрос, возвращающий одно значение
select title, author, price, amount
from book
where price = (select min(price)
               from book);

select author, title, price
from book
where price <= (select avg(price)
                from book)
order by price desc;

-- Использование вложенного запроса в выражении
select author, title, price
from book
where (price - (select min(price)
                from book)) <= 150
order by price;

-- Вложенный запрос, оператор IN
select title, author, amount, price
from book
where author in (select author
                 from book
                 group by author
                 having sum(amount) >= 12);

select author, title, amount
from book
where title in (select title
                from book
                group by amount
                having count(amount) = 1);

-- Вложенный запрос, операторы ANY и ALL
select author, title, price
from book
where price < any (select min(price)
                   from book
                   group by author);

-- Вложенный запрос после SELECT
select title,
       author,
       amount,
       (select avg(amount)
        from book) as Среднее_количесво
from book
where amount - (select avg(amount) from book) >> 3;

select title,
       author,
       amount,
       (select max(amount)
        from book) - amount as Заказ
from book
where (select max(amount)
       from book) - amount <> 0;

select author,
       title,
       price,
       amount,
       round(((price * amount) / (select sum(price * amount) from book)) * 100, 2) as Income_percent
from book
order by (price * amount) desc;

-- Создание таблицы supply
create table supply
(
    supply_id INT PRIMARY KEY AUTO_INCREMENT,
    title     varchar(50),
    author    varchar(50),
    price     decimal(8, 2),
    amount    int
);

-- Заполнение таблицы supply значениями
insert into supply (title, author, price, amount)
    value ('Лирика', 'Пастернак Б.Л.', 518.99, 2);
insert into supply (title, author, price, amount)
values ('Черный человек', 'Есенин С.А.', 570.20, 6);
insert into supply (title, author, price, amount)
values ('Белая гвардия', 'Булгаков М.А.', 540.50, 7);
insert into supply (title, author, price, amount)
values ('Идиот', 'Достоевский Ф.М.', 360.80, 3);

-- Выбор всех данных из таблицы supply
select *
from supply;

-- Добавление записей из другой таблицы
insert into book (title, author, price, amount)
select title, author, price, amount
from supply
where author not in ('Булгаков М.А.', 'Достоевский Ф.М.');

-- Добавление записей, вложенные запросы
insert into book (title, author, price, amount)
select title, author, price, amount
from supply
where author not in (select author
                     from book);

-- Запросы на добавление колонки
alter table book
    add column buy int
        after amount;

-- Запросы на обновление
update book
set price = price * 0.9
where amount between 5 and 10;

update book
set buy = 0
where book_id = 1;

update book
set buy = 3
where book_id = 2;

update book
set buy = 8
where book_id = 3;

update book
set buy = 0
where book_id = 4;

update book
set buy = 18
where book_id = 6;

-- Запросы на обновление нескольких столбцов
update book
set buy   = if(buy > amount, amount, buy),
    price = if(buy = 0, price * 0.9, price);

-- Запросы на обновление нескольких таблиц
update book, supply
set book.amount = book.amount + supply.amount,
    book.price  = (book.price + supply.price) / 2
where book.title = supply.title
  and book.author = supply.author;

-- Запросы на удаление
delete
from supply
where author in
      (select author
       from book
       group by author
       having sum(amount) > 10);

-- Запросы на создание таблицы
create table ordering as
select author,
       title,
       (select round(avg(amount), 2)
        from book) as amount
from book
where amount < (select round(avg(amount), 2) from book);

update book
set price = round(price * 0.95, 2)
where author = 'Есенин С.А.'
  and amount in (select *
                 from (select max(amount) from book) as max_price);

-- Создание таблицы trip
create table trip
(
    trip_id    INT PRIMARY KEY AUTO_INCREMENT,
    name       VARCHAR(30),
    city       VARCHAR(25),
    per_diem   DECIMAL(8, 2),
    date_first date,
    date_last  date
);

-- Заполнение таблицы trip значениями
insert into trip (name, city, per_diem, date_first, date_last)
values ('Баранов П.Е.', 'Москва', 700, '2020-01-12', '2020-01-17'),
       ('Абрамова К.А.', 'Владивосток', 450, '2020-01-14', '2020-01-27'),
       ('Семенов И.В.', 'Москва', 700, '2020-01-23', '2020-01-31'),
       ('Ильиных Г.Р.', 'Владивосток', 450, '2020-01-12', '2020-02-02'),
       ('Колесов С.П.', 'Москва', 700, '2020-02-01', '2020-02-06'),
       ('Баранов П.Е.', 'Москва', 700, '2020-02-14', '2020-02-22'),
       ('Абрамова К.А.', 'Москва', 700, '2020-02-23', '2020-03-01'),
       ('Лебедев Т.К.', 'Москва', 700, '2020-03-03', '2020-03-06'),
       ('Колесов С.П.', 'Новосибирск', 450, '2020-02-27', '2020-03-12'),
       ('Семенов И.В.', 'Санкт-Петербург', 700, '2020-03-29', '2020-04-05'),
       ('Абрамова К.А.', 'Москва', 700, '2020-04-06', '2020-04-14'),
       ('Баранов П.Е.', 'Новосибирск', 450, '2020-04-18', '2020-05-04'),
       ('Лебедев Т.К.', 'Томск', 450, '2020-05-20', '2020-05-31'),
       ('Семенов И.В.', 'Санкт-Петербург', 700, '2020-06-01', '2020-06-03'),
       ('Абрамова К.А.', 'Санкт-Петербург', 700, '2020-05-28', '2020-06-04'),
       ('Федорова А.Ю.', 'Новосибирск', 450, '2020-05-25', '2020-06-04'),
       ('Колесов С.П.', 'Новосибирск', 450, '2020-06-03', '2020-06-12'),
       ('Федорова А.Ю.', 'Томск', 450, '2020-06-20', '2020-06-26'),
       ('Абрамова К.А.', 'Владивосток', 450, '2020-07-02', '2020-07-13'),
       ('Баранов П.Е.', 'Воронеж', 450, '2020-07-19', '2020-07-25');

select name, city, per_diem, date_first, date_last
from trip
where name like '%а %'
order by date_last desc;

select distinct name
from trip
where city = 'Москва'
order by name;

select city, count(city) as Количество
from trip
group by city
order by city;

-- Оператор LIMIT
select city, count(city) as Количество
from trip
group by city
order by Количество desc
limit 2;

select name, city, datediff(date_last, date_first) + 1 as Длительность
from trip
where city not in ('Москва', 'Санкт-Петербург')
order by Длительность desc;

select name, city, date_first, date_last
from trip
where datediff(date_first, date_last) = (select min(datediff(date_first, date_last))
                                         from trip);

select name, city, date_first, date_last
from trip
where month(date_last) = month(date_first)
order by city, name;

select monthname(date_first) as Месяц, count(city) as Количество
from trip
group by Месяц
order by Количество desc, Месяц;

select name, city, date_first, (datediff(date_last, date_first) + 1) * per_diem as Сумма
from trip
where month(date_first) in (2, 3)
  and year(date_first) = 2020
order by name, Сумма desc;

SELECT name, SUM((DATEDIFF(date_last, date_first) + 1) * per_diem) AS Сумма
from trip
where name in (select name
               from trip
               group by name
               having count(name) > 3)
group by name
order by Сумма desc;

-- Срздание таблицы fine
CREATE TABLE fine
(
    fine_id        INT PRIMARY KEY AUTO_INCREMENT,
    name           VARCHAR(30),
    number_plate   VARCHAR(6),
    violation      VARCHAR(50),
    sum_fine       DECIMAL(8, 2),
    date_violation DATE,
    date_payment   DATE
);

-- Заполнение таблицы значениями
INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES ('Баранов П.Е.', 'P523BT', 'Превышение скорости(от 40 до 60)', NULL, '2020-02-14', NULL),
       ('Абрамова К.А.', 'О111AB', 'Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL),
       ('Яковлев Г.Р.', 'T330TT', 'Проезд на запрещающий сигнал', NULL, '2020-03-03', NULL),
       ('Баранов П.Е.', 'P523BT', 'Превышение скорости(от 40 до 60)', 500.00, '2020-01-12', '2020-01-17'),
       ('Абрамова К.А.', 'О111AB', 'Проезд на запрещающий сигнал', 1000.00, '2020-01-14', '2020-02-27'),
       ('Яковлев Г.Р.', 'T330TT', 'Превышение скорости(от 20 до 40)', 500.00, '2020-01-23', '2020-02-23'),
       ('Яковлев Г.Р.', 'M701AA', 'Превышение скорости(от 20 до 40)', NULL, '2020-01-12', NULL),
       ('Колесов С.П.', 'K892AX', 'Превышение скорости(от 20 до 40)', NULL, '2020-02-01', NULL);

-- Создание таблицы traffic_violation
CREATE TABLE traffic_violation
(
    violation_id INT PRIMARY KEY AUTO_INCREMENT,
    violation    VARCHAR(50),
    sum_fine     DECIMAL(8, 2)
);

-- Заполнение таблицы значениями
INSERT INTO traffic_violation (violation, sum_fine)
VALUES ('Превышение скорости(от 20 до 40)', 500),
       ('Превышение скорости(от 40 до 60)', 1000),
       ('Проезд на запрещающий сигнал', 1000);

-- Использование временного имени таблицы (алиаса)
update fine as f, traffic_violation as tv
set f.sum_fine = tv.sum_fine
where f.violation = tv.violation
  and f.sum_fine is null;

-- Группировка данных по нескольким столбцам
select name, number_plate, violation
from fine
group by name, number_plate, violation
having count(number_plate) >= 2
order by name, number_plate, violation;

select *
from fine;

-- В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей
-- 1 вариент решения задачи
update fine,
    (select name, number_plate, violation
     from fine
     group by name, number_plate, violation
     having count(number_plate) >= 2
     order by name, number_plate, violation) query_in
set fine.sum_fine = fine.sum_fine * 2
where fine.date_payment is null
  and fine.name = query_in.name
  and fine.number_plate = query_in.number_plate
  and fine.violation = query_in.violation;

-- 2 вариент решения задачи
create table query_in
(
    query_in_id  INT PRIMARY KEY AUTO_INCREMENT,
    name         VARCHAR(30),
    number_plate VARCHAR(6),
    violation    VARCHAR(50)
);

insert into query_in (name, number_plate, violation)
    value ('Абрамова К.А.', 'О111AB', 'Проезд на запрещающий сигнал');

insert into query_in (name, number_plate, violation)
    value ('Баранов П.Е.', 'P523BT', 'Превышение скорости(от 40 до 60)');

update fine, query_in
set fine.sum_fine = fine.sum_fine * 2
where fine.name = query_in.name
  and fine.number_plate = query_in.number_plate
  and fine.violation = fine.violation;

-- Создание таблицы payment
create table payment
(
    payment_id     INT PRIMARY KEY AUTO_INCREMENT,
    name           VARCHAR(30),
    number_plate   VARCHAR(6),
    violation      VARCHAR(50),
    date_violation DATE,
    date_payment   DATE
);

INSERT INTO payment (name, number_plate, violation, date_violation, date_payment)
VALUES ('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', '2020-01-12', '2020-01-22');
INSERT INTO payment (name, number_plate, violation, date_violation, date_payment)
VALUES ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', '2020-02-14', '2020-03-06');
INSERT INTO payment (name, number_plate, violation, date_violation, date_payment)
VALUES ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', '2020-03-03', '2020-03-23');

-- Задание
update fine, payment
set fine.date_payment = payment.date_payment,
    fine.sum_fine     = if(datediff(payment.date_payment, payment.date_violation) <= 20, fine.sum_fine / 2,
                           fine.sum_fine)
where fine.name = payment.name
  and fine.number_plate = payment.number_plate
  and fine.violation = payment.violation
  and fine.date_payment is null;

-- Создание таблицы через select
create table back_payment as
select name, number_plate, violation, sum_fine, date_violation
from fine
where date_payment is null;

delete
from fine
where date_violation < '2020-02-01';

-- Создание таблицы author
create table author
(
    author_id   INT PRIMARY KEY AUTO_INCREMENT,
    name_author VARCHAR(50)
);

-- Заполнение таблицы author
insert into author (name_author)
values ('Булгаков М.А.');
insert into author (name_author)
values ('Достоевский Ф.М.');
insert into author (name_author)
values ('Есенин С.А.');
insert into author (name_author)
values ('Пастернак Б.Л.');

create table genre
(
    genre_id   INT PRIMARY KEY AUTO_INCREMENT,
    name_genre VARCHAR(30)
);

-- Создание таблицы book с двумя foreign key
CREATE TABLE book
(
    book_id   INT PRIMARY KEY AUTO_INCREMENT,
    title     VARCHAR(50),
    author_id INT NOT NULL,
    genre_id  INT,
    price     DECIMAL(8, 2),
    amount    INT,
    FOREIGN KEY (author_id) REFERENCES author (author_id),
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id)
);

drop table book;

-- Создание таблицы book с указанием действий, осуществляемых при удалении записи главной таблицы
CREATE TABLE book
(
    book_id   INT PRIMARY KEY AUTO_INCREMENT,
    title     VARCHAR(50),
    author_id INT NOT NULL,
    genre_id  INT,
    price     DECIMAL(8, 2),
    amount    INT,
    FOREIGN KEY (author_id) REFERENCES author (author_id) on delete cascade,
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id) on delete set null
);


insert into genre (name_genre) value ('Роман');
insert into genre (name_genre) value ('Поэзия');

select *
from genre;
select *
from author;
select *
from book;

insert into book (title, author_id, genre_id, price, amount)
    value ('Мастер и маргарита', 1, 1, 670.99, 3);
insert into book (title, author_id, genre_id, price, amount)
    value ('Белая гвардия', 1, 1, 540.50, 5);
insert into book (title, author_id, genre_id, price, amount)
    value ('Идиот', 2, 1, 460.00, 10);
insert into book (title, author_id, genre_id, price, amount)
    value ('Братья Карамазовы', 2, 1, 799.01, 3);
insert into book (title, author_id, genre_id, price, amount)
    value ('Игрок', 2, 1, 480.50, 10);
insert into book (title, author_id, genre_id, price, amount)
    value ('Стихотворения и поэмы', 3, 2, 650.00, 15);
insert into book (title, author_id, genre_id, price, amount)
    value ('Черный человек', 3, 2, 570.20, 6);
insert into book (title, author_id, genre_id, price, amount)
    value ('Лирика', 4, 2, 518.99, 2);

create table author
(
    author_id   int primary key auto_increment,
    name_author varchar(50)
);

insert into author (name_author)
values ('Булгаков М.А.');
insert into author (name_author)
values ('Достоевский Ф.М.');
insert into author (name_author)
values ('Есенин С.А.');
insert into author (name_author)
values ('Пастернак Б.Л.');
insert into author (name_author)
values ('Лермонтов М.Ю.');

create table genre
(
    genre_id   int primary key auto_increment,
    name_genre varchar(50)
);

insert into genre (name_genre)
values ('Роман');
insert into genre (name_genre)
values ('Поэзия');
insert into genre (name_genre)
values ('Приключения');

create table book
(
    book_id   int primary key auto_increment,
    title     varchar(50),
    author_id int not null,
    genre_id  int,
    price     decimal(8, 2),
    amount    int,
    foreign key (author_id) references author (author_id) on delete cascade,
    foreign key (genre_id) references genre (genre_id) on delete set null
);

insert into book (title, author_id, genre_id, price, amount)
values ('Мастер и Маргарита', 1, 1, 670.99, 3);
insert into book (title, author_id, genre_id, price, amount)
values ('Белая гвардия', 1, 1, 540.50, 5);
insert into book (title, author_id, genre_id, price, amount)
values ('Идиот', 2, 1, 460.00, 10);
insert into book (title, author_id, genre_id, price, amount)
values ('Братья Карамазовы', 2, 1, 799.01, 3);
insert into book (title, author_id, genre_id, price, amount)
values ('Игрок', 2, 1, 480.50, 10);
insert into book (title, author_id, genre_id, price, amount)
values ('Стихотворения и поэмы', 3, 2, 650.00, 15);
insert into book (title, author_id, genre_id, price, amount)
values ('Черный человек', 3, 2, 570.20, 6);
insert into book (title, author_id, genre_id, price, amount)
values ('Лирика', 4, 2, 518.99, 2);

-- Соединение INNER JOIN
select title,
       name_genre,
       price
from book
         inner join genre
                    on book.genre_id = genre.genre_id
where book.amount > 8
order by price desc;

-- Внешнее соединение LEFT и RIGHT OUTER JOIN
select name_genre
from genre as g
         left join book as b
                   on g.genre_id = b.genre_id
where b.genre_id is null;

-- Перекрестное соединение CROSS JOIN
create table city
(
    city_id   int primary key auto_increment,
    name_city varchar(50)
);

insert into city (name_city)
values ('Москва');
insert into city (name_city)
values ('Санкт-Петербург');
insert into city (name_city)
values ('Владивосток');

select name_city,
       name_author,
       DATE_ADD('2020-01-01', interval floor(rand() * (365 - 1) + 1) DAY) as Дата
from city
         cross join author
order by name_city, Дата desc;

-- Запросы на выборку из нескольких таблиц
select name_genre,
       title,
       name_author
from genre
         inner join book
                    on genre.genre_id = book.genre_id
         inner join author
                    on author.author_id = book.author_id
where name_genre like 'роман'
order by title;

select name_author, sum(amount) as Количество
from author
         left join book
                   on author.author_id = book.author_id
group by name_author
having Количество < 10
    or count(title) = 0
order by Количество asc;

-- Запросы для нескольких таблиц со вложенными запросами

show columns from book;